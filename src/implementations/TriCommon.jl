"""
"""
const Tri3 = ReferenceFEType{3, 2}
"""
"""
const Tri6 = ReferenceFEType{6, 2}
"""
"""
const TriUnion = Union{Tri3, Tri6}

"""
Eventually move this to FastQuassQuadrature implementation
"""
function quadrature_points_and_weights(::E, degree::I, ::Type{Ftype}) where {E <: TriUnion, I <: Integer, Ftype <: AbstractFloat}
  if degree == 1
    # this is dumb that I have to do this to minimize allocations
    # ξs = Matrix{Ftype}(undef, 2, 1)
    # ξs[1, 1] = 1. / 3.
    # ξs[2, 1] = 1. / 3.
    ξs = Vector{SVector{2, Ftype}}(undef, 1)
    ξs[1] = SVector{2, Ftype}(1. / 3., 1. / 3.)
    ws = Ftype[0.5]
  elseif degree == 2
    # ξs = Ftype[
    #   2. / 3. 1. / 6. 1. / 6.;
    #   1. / 6. 2. / 3. 1. / 6
    # ]
    ξs = Vector{SVector{2, Ftype}}(undef, 3)
    ξs[1] = SVector{2, Ftype}(2. / 3., 1. / 6.)
    ξs[2] = SVector{2, Ftype}(1. / 6., 2. / 3.)
    ξs[3] = SVector{2, Ftype}(1. / 6., 1. / 6.)
    ws = Ftype[1. / 6., 1. / 6., 1. / 6.]
  elseif degree <= 4
    # ξs = Ftype[
    #   1.081030181680700E-01 4.459484909159650E-01 4.459484909159650E-01 8.168475729804590E-01 9.157621350977100E-02 9.157621350977100E-02;
    #   4.459484909159650E-01 1.081030181680700E-01 4.459484909159650E-01 9.157621350977100E-02 8.168475729804590E-01 9.157621350977100E-02
    # ]
    ξs = Vector{SVector{2, Ftype}}(undef, 6)
    ξs[1] = SVector{2, Ftype}(1.081030181680700E-01, 4.459484909159650E-01)
    ξs[2] = SVector{2, Ftype}(4.459484909159650E-01, 1.081030181680700E-01)
    ξs[3] = SVector{2, Ftype}(4.459484909159650E-01, 4.459484909159650E-01)
    ξs[4] = SVector{2, Ftype}(8.168475729804590E-01, 9.157621350977100E-02)
    ξs[5] = SVector{2, Ftype}(9.157621350977100E-02, 8.168475729804590E-01)
    ξs[6] = SVector{2, Ftype}(9.157621350977100E-02, 9.157621350977100E-02)

    ws = Ftype[
      1.116907948390055E-01,
      1.116907948390055E-01,
      1.116907948390055E-01,
      5.497587182766100E-02,
      5.497587182766100E-02,
      5.497587182766100E-02
    ]
  elseif degree <= 5
    # ξs = Ftype[
    #   3.33333333333333E-01 5.97158717897700E-02 4.70142064105115E-01 4.70142064105115E-01 7.97426985353087E-01 1.01286507323456E-01 1.01286507323456E-01;
    #   3.33333333333333E-01 4.70142064105115E-01 5.97158717897700E-02 4.70142064105115E-01 1.01286507323456E-01 7.97426985353087E-01 1.01286507323456E-01
    # ]
    ξs = Vector{SVector{2, Ftype}}(undef, 7)
    ξs[1] = SVector{2, Ftype}(3.33333333333333E-01, 3.33333333333333E-01)
    ξs[2] = SVector{2, Ftype}(5.97158717897700E-02, 4.70142064105115E-01)
    ξs[3] = SVector{2, Ftype}(4.70142064105115E-01, 5.97158717897700E-02)
    ξs[4] = SVector{2, Ftype}(4.70142064105115E-01, 4.70142064105115E-01)
    ξs[5] = SVector{2, Ftype}(7.97426985353087E-01, 1.01286507323456E-01)
    ξs[6] = SVector{2, Ftype}(1.01286507323456E-01, 7.97426985353087E-01)
    ξs[7] = SVector{2, Ftype}(1.01286507323456E-01, 1.01286507323456E-01)

    ws = Ftype[
      1.12500000000000E-01,
      6.61970763942530E-02,
      6.61970763942530E-02,
      6.61970763942530E-02,
      6.29695902724135E-02,
      6.29695902724135E-02,
      6.29695902724135E-02
    ]
  elseif degree <= 6
    # ξs = Ftype[
    #   5.01426509658179E-01 2.49286745170910E-01 2.49286745170910E-01 8.73821971016996E-01 6.30890144915020E-02 6.30890144915020E-02 5.31450498448170E-02 6.36502499121399E-01 3.10352451033784E-01 5.31450498448170E-02 6.36502499121399E-01 3.10352451033784E-01;
    #   2.49286745170910E-01 5.01426509658179E-01 2.49286745170910E-01 6.30890144915020E-02 8.73821971016996E-01 6.30890144915020E-02 3.10352451033784E-01 5.31450498448170E-02 6.36502499121399E-01 6.36502499121399E-01 3.10352451033784E-01 5.31450498448170E-02
    # ]
    ξs = Vector{SVector{2, Ftype}}(undef, 12)
    ξs[1]  = SVector{2, Ftype}(5.01426509658179E-01, 2.49286745170910E-01)
    ξs[2]  = SVector{2, Ftype}(2.49286745170910E-01, 5.01426509658179E-01)
    ξs[3]  = SVector{2, Ftype}(2.49286745170910E-01, 2.49286745170910E-01)
    ξs[4]  = SVector{2, Ftype}(8.73821971016996E-01, 6.30890144915020E-02)
    ξs[5]  = SVector{2, Ftype}(6.30890144915020E-02, 8.73821971016996E-01)
    ξs[6]  = SVector{2, Ftype}(6.30890144915020E-02, 6.30890144915020E-02)
    ξs[7]  = SVector{2, Ftype}(5.31450498448170E-02, 3.10352451033784E-01)
    ξs[8]  = SVector{2, Ftype}(6.36502499121399E-01, 5.31450498448170E-02)
    ξs[9]  = SVector{2, Ftype}(3.10352451033784E-01, 6.36502499121399E-01)
    ξs[10] = SVector{2, Ftype}(5.31450498448170E-02, 6.36502499121399E-01)
    ξs[11] = SVector{2, Ftype}(6.36502499121399E-01, 3.10352451033784E-01)
    ξs[12] = SVector{2, Ftype}(3.10352451033784E-01, 5.31450498448170E-02)

    ws = Ftype[
      5.83931378631895E-02,
      5.83931378631895E-02,
      5.83931378631895E-02,
      2.54224531851035E-02,
      2.54224531851035E-02,
      2.54224531851035E-02,
      4.14255378091870E-02,
      4.14255378091870E-02,
      4.14255378091870E-02,
      4.14255378091870E-02,
      4.14255378091870E-02,
      4.14255378091870E-02
    ]
  else
    throw(ErrorException("Unsupported quadrature degree."))
  end
  return ξs, ws
end
